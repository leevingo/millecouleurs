<?php

/**
 * @file
 * Module with adaptations for Monde Des Milles Couleurs
 */

/**
 * Implements hook_form_alter()
 */
function mdmc_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  //Add validation to the 'add product' form to hide/disable fields and autopopulate SKU and Title.
  if ($form_id == 'commerce_product_ui_product_form') {
    if ($form['#entity_type'] == 'commerce_product') {

      $form['sku']['#required'] = FALSE;
      $form['sku']['#disabled'] = TRUE;
      $form['#validate'][] = 'mdmc_add_product_validate';

      if($form['#bundle'] == 'product') {
        $form['sku']['#required'] = FALSE;
        $form['sku']['#disabled'] = TRUE;
        $form['title']['#required'] = FALSE;
        $form['title']['#disabled'] = TRUE;
        $form['#validate'][] = 'mdmc_add_product_validate';
        if ($user->uid != 1) {
          unset($form['language']);
          unset($form['change_history']);
          if (isset($form['#entity']->product_id)) {
            $form['field_product_supplier']['#disabled'] = TRUE;
            $form['field_product_type']['#disabled'] = TRUE;
            $form['field_product_sort']['#disabled'] = TRUE;
            $form['field_product_variation']['#disabled'] = TRUE;
          }
        }
      }
    }
  }
  // Disable form elements for completed orders with invoices.
  if ($form_id == 'commerce_order_ui_order_form') {
    if ($form['#entity']->status == 'completed') {
      $invoices = array();
      $invoices = db_select('commerce_invoice', 'ci')
          ->fields('ci', array('invoice_id'))
          ->condition('order_id', $form['#entity']->order_id)
          ->execute()
          ->fetchAll();

      if (!empty($invoices)) {
        foreach (element_children($form) as $element) {
        $form[$element]['#disabled'] = TRUE;
        }
        drupal_set_message(t("This order has been completed and has " . count($invoices) . " invoices. It can no longer be changed."), 'warning');
      }
    }
  }
}

/**
 *
 * Function to create product SKU and product title (used in the add-product form)
 * @param type $form
 * @param type $form_state
 */
function mdmc_add_product_validate(&$form, &$form_state) {
  if ($form['#entity_type'] == 'commerce_product') {
    if($form['#bundle'] == 'product') {
      //Check if values are empty. Get names for taxonomy terms. Create trimmed values and strings.
      if (!empty($form_state['values']['field_product_supplier']['und'][0]['tid'])) {
        $supplier_tid = $form_state['values']['field_product_supplier']['und'][0]['tid'];
        $supplier = taxonomy_term_load($supplier_tid)->name;
        $supplier_trimmed = mdmc_trim_string($supplier, 3);
        $supplier_trimmed_string = $supplier_trimmed . '-';
      } else {
        $supplier = '';
        $supplier_trimmed_string = '';
      }

      if (!empty($form_state['values']['field_product_type']['und'][0]['tid'])) {
        $type_tid = $form_state['values']['field_product_type']['und'][0]['tid'];
        $type = taxonomy_term_load($type_tid)->name;
        $type_trimmed = mdmc_trim_string($type, 4);
        $type_trimmed_string = $type_trimmed . '-';
      } else {
        $type = '';
        $type_trimmed_string = '';
      }

      if (!empty($form_state['values']['field_product_sort']['und'][0]['tid'])) {
        $sort_tid = $form_state['values']['field_product_sort']['und'][0]['tid'];
        $sort = taxonomy_term_load($sort_tid)->name;
        $sort_trimmed = mdmc_trim_string($sort, 4);
        $sort_trimmed_string = $sort_trimmed . '-';
      } else {
        $sort = '';
        $sort_trimmed_string = '';
      }

      if (!empty($form_state['values']['field_product_variation']['und'][0]['name'])) {
        $variation = $form_state['values']['field_product_variation']['und'][0]['name'];
        $variation_array = explode(" ", $variation);
        $variation_trimmed_string = '';
        foreach ($variation_array as $string) {
          $variation_trimmed_string .= mdmc_trim_string($string, 4) . '-';
        }
      } else {
        $variation = '';
        $variation_trimmed_string = '';
      }

      //Build sku and title values and strings.
      $sku = $supplier_trimmed_string . $type_trimmed_string . $sort_trimmed_string . $variation_trimmed_string . '1';
      $title = (!empty($sort) ? $sort . ' ' : '') . (!empty($variation) ? $variation . ' ' : '');

    //Set the sku and title value to the form-state
      form_set_value($form['sku'], $sku, $form_state);
      form_set_value($form['title'], $title, $form_state);
    }

    if ($form['#bundle'] == 'empty_case') {
      if (!empty($form_state['values']['title'])) {
        $title = $form_state['values']['title'];
        $title_array = explode(" ", $title);
        $title_trimmed_string = '';
        foreach ($title_array as $string) {
          $title_trimmed_string .= mdmc_trim_string($string, 4) . '-';
        }
      } else {
        $title = '';
        $title_trimmed_string = '';
      }

      //Build sku
      $sku = 'EMPT-CASE-' . $title_trimmed_string;

      //Set the sku
      form_set_value($form['sku'], $sku, $form_state);
    }
    if ($form['#bundle'] == 'promo') {
      if (!empty($form_state['values']['title'])) {
        $title = $form_state['values']['title'];
        $title_array = explode(" ", $title);
        $title_trimmed_string = '';
        foreach ($title_array as $string) {
          $title_trimmed_string .= mdmc_trim_string($string, 4) . '-';
        }
      } else {
        $title = '';
        $title_trimmed_string = '';
      }

      //Build sku
      $sku = 'PROM-' . $title_trimmed_string;

      //Set the sku
      form_set_value($form['sku'], $sku, $form_state);
    }
  }
}

//function to make strings uppercase and trim them.
function mdmc_trim_string($string, $number) {
  if (!empty($string)) {
    if(($number == 0) || (strlen($string) < $number)) {
      $string = strtoupper(preg_replace("/[^a-zA-Z]+/", '', $string));
      return $string;
    }
    else {
      $string = strtoupper(mb_substr(preg_replace("/[^a-zA-Z]+/", '', $string), 0, $number));
      return $string;
    }
  }
}
